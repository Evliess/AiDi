name: Build Maven Application
on:
  push:

    branches: [ release/dev, master ]   # 在推送到main或master分支时触发
  pull_request:
    branches: [ release/dev, master ] 

jobs:
  build:
    runs-on: ubuntu-latest      # 使用最新的Ubuntu运行器

    steps:
    # 步骤1: 检出代码
    - name: Checkout code
      uses: actions/checkout@v4 # 使用checkout动作获取仓库代码

    # 步骤2: 设置JDK（用于后续的Maven构建）
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    # 步骤3: 设置Maven依赖缓存（可选，但可显著加速后续构建）
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository   # Maven本地仓库路径
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }} # 根据pom.xml变化失效缓存
        restore-keys: |
          ${{ runner.os }}-maven-
    # 步骤7: 使用Maven打包后端项目
    - name: Package with Maven
      run: |
        mvn clean package             # 执行Maven打包命令
    # 步骤8: （可选）上传构建产物（如JAR包）以便后续下载
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: aidi     # 构件名称，替换为你的应用名
        path: target/*.jar # 上传backend/target目录下的所有JAR文件
  create-release:
    runs-on: ubuntu-latest
    needs: build # 确保此job在build job完成后执行
    #if: github.event_name == 'release' # 可选：如果你希望只在创建GitHub Release时运行此job。如果希望push到分支就创建，则移除或修改此条件。

    steps:
    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: aidi # 下载之前上传的构件

    - name: List files for verification
      run: ls -la # 列出文件，确认JAR已下载，用于调试

    - name: Create GitHub Release & Upload Asset
      uses: softprops/action-gh-release@v1 # 一个常用的创建Release的Action
      with:
        tag_name: ${{ github.ref_name }}-tag       # 使用触发事件的git ref名称作为标签，例如release事件中的tag
        name: Release ${{ github.ref_name }}
        body: ${{ github.event.release.body }} # 读取Release事件中的描述正文
        # 如果你是在push到分支时触发，可能需要动态生成版本号，例如从pom.xml中读取
        files: ./*.jar # 上传当前目录下的所有JAR文件
      env:
        GITHUB_TOKEN: ${{ secrets.TK_RELEASE }} # 使用你之前设置的secret进行认证
